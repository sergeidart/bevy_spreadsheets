// src/sheets/systems/io/scan.rs

use bevy::prelude::*;
use std::fs;

// Use items defined in the parent io module (io/mod.rs)
use super::get_default_data_base_path;
// Use the parser from the load module
use super::load::load_and_parse_json_sheet;

// Use types from the main sheets module
use crate::sheets::{
    definitions::SheetGridData,
    resources::SheetRegistry,
};

/// Startup system to scan the data directory for unregistered `.json` files.
/// Should run after initial registration and loading.
pub fn scan_directory_for_sheets_startup(mut registry: ResMut<SheetRegistry>) {
    let base_path = get_default_data_base_path();
    info!("Scanning directory '{:?}' for manually added sheets...", base_path);

    if !base_path.exists() {
        info!("Data directory does not exist. No manual sheets to scan.");
        return;
    }

    let mut found_unregistered_count = 0;
    match fs::read_dir(&base_path) {
        Ok(entries) => {
            for entry_result in entries {
                match entry_result {
                    Ok(entry) => {
                        let path = entry.path();
                        if path.is_file() && path.extension().map_or(false, |ext| ext == "json" || ext == "JSON") {
                            let filename = path.file_name().map_or_else(
                                || "unknown.json".to_string(),
                                |os_str| os_str.to_string_lossy().into_owned()
                            );
                            let sheet_name_candidate = path.file_stem().map_or_else(
                                || filename.trim_end_matches(".json").trim_end_matches(".JSON").to_string(),
                                |os_str| os_str.to_string_lossy().into_owned()
                            );

                            if sheet_name_candidate.is_empty() {
                                warn!("Skipping file '{}': Empty sheet name derived.", filename);
                                continue;
                            }

                            let already_registered = registry.get_sheet(&sheet_name_candidate).is_some() ||
                                registry.iter_sheets().any(|(_, data)| data.metadata.as_ref().map_or(false, |m| m.data_filename == filename));

                            if !already_registered {
                                trace!("Found unregistered file: '{}'. Attempting load as '{}'...", filename, sheet_name_candidate);

                                match load_and_parse_json_sheet(&path) {
                                    Ok((grid_data, _loaded_filename)) => {
                                        let sheet_data = SheetGridData {
                                             metadata: None, // Will be generated by add_or_replace
                                             grid: grid_data,
                                        };
                                        registry.add_or_replace_sheet(sheet_name_candidate.clone(), sheet_data);
                                        found_unregistered_count += 1;
                                        info!("Loaded and registered manually added sheet '{}'.", sheet_name_candidate);
                                    }
                                    Err(e) => {
                                        // Don't log error for handled empty files
                                        if !e.contains("File is empty") {
                                            error!("Failed to load manual sheet '{}' from '{}': {}", sheet_name_candidate, filename, e);
                                        }
                                    }
                                }
                            } else {
                                trace!("Skipping '{}': Corresponds to registered sheet.", filename);
                            }
                        }
                    }
                    Err(e) => {
                        error!("Failed processing entry in '{:?}': {}", base_path, e);
                    }
                }
            }
        }
        Err(e) => {
            error!("Failed to read directory '{:?}': {}", base_path, e);
        }
    }

    if found_unregistered_count == 0 {
        info!("No new manually added sheets found.");
    } else {
         info!("Found and processed {} manually added sheets.", found_unregistered_count);
    }
    info!("Directory scan finished.");
}